name: Build OCI Image (JVM)
on:
  workflow_call:
    inputs:
      pom_dir:
        required: false
        type: string
        default: '.'
      image_name:
        required: false
        type: string
        default: image
      image_file:
        required: false
        type: string
        default: image.yaml
      target_ref:
        required: false
        type: string
        default: 'refs/heads/main'
      image_platform:
        required: false
        type: string
        default: linux/amd64
      use_qemu:
        required: false
        type: boolean
        default: false
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v2
    - uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: graalvm
        cache: 'maven'
    - name: Set version
      run: |
        CURRENT_VERSION=$(./mvnw -f ${{ inputs.pom_dir }} help:evaluate -Dexpression=project.version -q -DforceStdout)
        NEW_VERSION=$(echo $CURRENT_VERSION | sed "s/-SNAPSHOT/.${GITHUB_SHA}/")
        ./mvnw -f ${{ inputs.pom_dir }} versions:set -DnewVersion=${NEW_VERSION} -DgenerateBackupPoms=false --no-transfer-progress
    - name: Set up QEMU
      if: inputs.use_qemu
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ inputs.image_platform }}
    - name: build image (Paketo Buildpack)
      run: |
        OS_ARCH=$(./mvnw -f ${{ inputs.pom_dir }} help:evaluate -Dexpression=os.arch -q -DforceStdout)
        ./mvnw -V -f ${{ inputs.pom_dir }} --no-transfer-progress spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=ghcr.io/${{ github.repository }}/${{ inputs.pom_dir }}:jvm_${OS_ARCH}_${GITHUB_SHA} -Dspring-boot.build-image.imagePlatform=${{ inputs.image_platform }}
    - name: Login to GitHub Container Registry
      if: github.ref == inputs.target_ref
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: docker push
      if: github.ref == inputs.target_ref
      run: |
        OS_ARCH=$(./mvnw -f ${{ inputs.pom_dir }} help:evaluate -Dexpression=os.arch -q -DforceStdout)
        docker push ghcr.io/${{ github.repository }}/${{ inputs.pom_dir }}:jvm_${OS_ARCH}_${GITHUB_SHA}
        docker tag ghcr.io/${{ github.repository }}/${{ inputs.pom_dir }}:jvm_${OS_ARCH}_${GITHUB_SHA} ghcr.io/${{ github.repository }}/${{ inputs.pom_dir }}:jvm_${OS_ARCH}
        docker push ghcr.io/${{ github.repository }}/${{ inputs.pom_dir }}:jvm_${OS_ARCH}
    - name: Generate digest
      if: github.ref == inputs.target_ref
      run: |
        OS_ARCH=$(./mvnw -f ${{ inputs.pom_dir }} help:evaluate -Dexpression=os.arch -q -DforceStdout)
        cat <<EOF > ${{ inputs.image_file }}
        image: $(docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/${{ github.repository }}/${{ inputs.pom_dir }}:jvm_${OS_ARCH}_${GITHUB_SHA})
        git_revision: ${GITHUB_SHA}
        EOF
    - name: Upload artifact
      if: github.ref == inputs.target_ref
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.image_name }}
        path: ${{ inputs.image_file }}